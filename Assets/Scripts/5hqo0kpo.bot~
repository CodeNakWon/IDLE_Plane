using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EndlessWorld : MonoBehaviour
{
    const float scale = 5f; //to game Control
    const float viewerMoveThresholdForChunkUpdate = 25f; // to game Control
    const float sqrViewerMoveThresholdForChunkUpdate = viewerMoveThresholdForChunkUpdate * viewerMoveThresholdForChunkUpdate;
    public Transform viewer;
    public static Vector2 viewerPosition;
	Vector2 viewerPositionOld;
	public float chunksViewDst;
	public Material mapMaterial;
	static MapGenerator mapGenerator;
	int chunkSize;
	int chunksGenDst;

	Queue<TerrainChunk> ChunkPool = new Queue<TerrainChunk>();
	Dictionary<Vector2, TerrainChunk> terrainChunkDictionary = new Dictionary<Vector2, TerrainChunk>();


	private void Start()
    {
        viewerPosition = new Vector2(viewer.position.x, viewer.position.z) / scale;
		chunkSize = MapGenerator.mapChunkSize - 1;
		viewerPositionOld = new Vector2(viewerPosition.x, viewerPosition.y);
		chunksGenDst = Mathf.RoundToInt(chunksViewDst / chunkSize);

	}

    private void Update()
    {
		viewerPosition.x = viewer.position.x;
		viewerPosition.y = viewer.position.z;
		if((viewerPositionOld - viewerPosition).sqrMagnitude > sqrViewerMoveThresholdForChunkUpdate)
        {
			viewerPositionOld.x = viewerPosition.x;
			viewerPositionOld.y = viewerPosition.y;
			UpdateTerrainChunk();
		}
	}

	public void UpdateTerrainChunk()
    {
		int currentChunkCoordX = Mathf.RoundToInt(viewerPosition.x / chunkSize);
		int currentChunkCoordY = Mathf.RoundToInt(viewerPosition.y / chunkSize);

		for (int yOffset = -chunksGenDst; yOffset <= chunksGenDst; yOffset++)
		{
			for (int xOffset = -chunksGenDst; xOffset <= chunksGenDst; xOffset++)
			{
				Vector2 viewedChunkCoord = new Vector2(currentChunkCoordX + xOffset, currentChunkCoordY + yOffset);
				if (terrainChunkDictionary.ContainsKey(viewedChunkCoord))
				{
					
				}
				else
				{
					terrainChunkDictionary.Add(viewedChunkCoord, new TerrainChunk(viewedChunkCoord, chunkSize, transform, mapMaterial, 0));
				}
			}
		}

	}

	public class TerrainChunk
	{

		GameObject meshObject;
		Vector2 position;
		Bounds bounds;

		MeshRenderer meshRenderer;
		MeshFilter meshFilter;

		MapData mapData;
		bool mapDataReceived;

		public TerrainChunk(Vector2 coord, int size, Transform parent, Material material, int types)
		{

			position = coord * size;
			bounds = new Bounds(position, Vector2.one * size);
			Vector3 positionV3 = new Vector3(position.x, 0, position.y);

			meshObject = new GameObject("Terrain Chunk");
			meshRenderer = meshObject.AddComponent<MeshRenderer>();
			meshFilter = meshObject.AddComponent<MeshFilter>();
			meshRenderer.material = material;

			meshObject.transform.position = positionV3 * scale;
			meshObject.transform.parent = parent;
			meshObject.transform.localScale = Vector3.one * scale;


			mapData = mapGenerator.GenerateMapData(position);
			Texture2D texture = TextureGenerator.TextureFromColourMap(mapData.colourMap, MapGenerator.mapChunkSize, MapGenerator.mapChunkSize);
			meshRenderer.material.mainTexture = texture;
			Debug.Log(mapData.heightMap);

		}

		void OnMapDataReceived(MapData mapData)
		{
			this.mapData = mapData;
			mapDataReceived = true;

			Texture2D texture = TextureGenerator.TextureFromColourMap(mapData.colourMap, MapGenerator.mapChunkSize, MapGenerator.mapChunkSize);
			meshRenderer.material.mainTexture = texture;

			UpdateTerrainChunk();
		}
	}

}
